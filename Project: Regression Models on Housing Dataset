import pandas as pd

data_url = "https://raw.githubusercontent.com/jbrownlee/Datasets/master/housing.data"

columns = ['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE',
           'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT', 'MEDV']

df = pd.read_csv(data_url, delim_whitespace=True, names=columns)

print(df.head())
from sklearn.model_selection import train_test_split

X = df.drop('MEDV', axis=1)
y = df['MEDV']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
print("X_train shape:", X_train.shape)
print("X_test shape:", X_test.shape)
print("y_train shape:", y_train.shape)
print("y_test shape:", y_test.shape)
from sklearn.linear_model import LinearRegression, Ridge, Lasso

linear_model = LinearRegression()
ridge_model = Ridge(alpha=1.0)
lasso_model = Lasso(alpha=0.1)

linear_model.fit(X_train, y_train)
ridge_model.fit(X_train, y_train)
lasso_model.fit(X_train, y_train)

from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import numpy as np

results = []

def evaluate_model(name, model):
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    rmse = np.sqrt(mse)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    results.append({
        'Model': name,
        'MSE': mse,
        'RMSE': rmse,
        'RÂ²': r2,
        'MAE': mae
    })

evaluate_model('Linear Regression', linear_model)
evaluate_model('Ridge Regression', ridge_model)
evaluate_model('Lasso Regression', lasso_model)
results_df = pd.DataFrame(results)
print("\n Model Performance Comparison:")
print(results_df)



